<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neuedu.ruidaoexam.dao.InviteStudentMapper" >
  <resultMap id="BaseResultMap" type="com.neuedu.ruidaoexam.entity.InviteStudent" >
    <id column="invite_id" property="inviteId" jdbcType="INTEGER" />
    <result column="paper_id" property="paperId" jdbcType="INTEGER" />
    <result column="teacher_id" property="teacherId" jdbcType="INTEGER" />
    <result column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="begin_time" property="beginTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
    <result column="invite_code" property="inviteCode" jdbcType="VARCHAR" />
    <result column="isReaded" property="isreaded" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    invite_id, paper_id, teacher_id, student_id, begin_time, end_time, invite_code, isReaded
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.neuedu.ruidaoexam.entity.InviteStudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from invite_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from invite_student
    where invite_id = #{inviteId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from invite_student
    where invite_id = #{inviteId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.ruidaoexam.entity.InviteStudentExample" >
    delete from invite_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.ruidaoexam.entity.InviteStudent" >
    insert into invite_student (invite_id, paper_id, teacher_id, 
      student_id, begin_time, end_time, 
      invite_code, isReaded)
    values (#{inviteId,jdbcType=INTEGER}, #{paperId,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, 
      #{studentId,jdbcType=INTEGER}, #{beginTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{inviteCode,jdbcType=VARCHAR}, #{isreaded,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.ruidaoexam.entity.InviteStudent" >
    insert into invite_student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="inviteId != null" >
        invite_id,
      </if>
      <if test="paperId != null" >
        paper_id,
      </if>
      <if test="teacherId != null" >
        teacher_id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="beginTime != null" >
        begin_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="inviteCode != null" >
        invite_code,
      </if>
      <if test="isreaded != null" >
        isReaded,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="inviteId != null" >
        #{inviteId,jdbcType=INTEGER},
      </if>
      <if test="paperId != null" >
        #{paperId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="beginTime != null" >
        #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inviteCode != null" >
        #{inviteCode,jdbcType=VARCHAR},
      </if>
      <if test="isreaded != null" >
        #{isreaded,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.ruidaoexam.entity.InviteStudentExample" resultType="java.lang.Integer" >
    select count(*) from invite_student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update invite_student
    <set >
      <if test="record.inviteId != null" >
        invite_id = #{record.inviteId,jdbcType=INTEGER},
      </if>
      <if test="record.paperId != null" >
        paper_id = #{record.paperId,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null" >
        teacher_id = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.beginTime != null" >
        begin_time = #{record.beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inviteCode != null" >
        invite_code = #{record.inviteCode,jdbcType=VARCHAR},
      </if>
      <if test="record.isreaded != null" >
        isReaded = #{record.isreaded,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update invite_student
    set invite_id = #{record.inviteId,jdbcType=INTEGER},
      paper_id = #{record.paperId,jdbcType=INTEGER},
      teacher_id = #{record.teacherId,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      begin_time = #{record.beginTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      invite_code = #{record.inviteCode,jdbcType=VARCHAR},
      isReaded = #{record.isreaded,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.ruidaoexam.entity.InviteStudent" >
    update invite_student
    <set >
      <if test="paperId != null" >
        paper_id = #{paperId,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null" >
        teacher_id = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="beginTime != null" >
        begin_time = #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inviteCode != null" >
        invite_code = #{inviteCode,jdbcType=VARCHAR},
      </if>
      <if test="isreaded != null" >
        isReaded = #{isreaded,jdbcType=INTEGER},
      </if>
    </set>
    where invite_id = #{inviteId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.ruidaoexam.entity.InviteStudent" >
    update invite_student
    set paper_id = #{paperId,jdbcType=INTEGER},
      teacher_id = #{teacherId,jdbcType=INTEGER},
      student_id = #{studentId,jdbcType=INTEGER},
      begin_time = #{beginTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      invite_code = #{inviteCode,jdbcType=VARCHAR},
      isReaded = #{isreaded,jdbcType=INTEGER}
    where invite_id = #{inviteId,jdbcType=INTEGER}
  </update>
 
	<select id="selectByEmailAndInvitecode" resultMap="BaseResultMap" parameterType="java.lang.String" >
	   select i.*
	   from invite_student i,student s
	   where i.student_id = s.student_id
	   and s.email=#{email,jdbcType=VARCHAR}
	   and i.invite_code=#{invitecode,jdbcType=VARCHAR}
	 </select>
 
  
</mapper>