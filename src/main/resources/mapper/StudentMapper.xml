<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neuedu.ruidaoexam.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="com.neuedu.ruidaoexam.entity.Student" >
    <id column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="points" property="points" jdbcType="INTEGER" />
    <result column="face_data" property="faceData" jdbcType="VARCHAR" />
  </resultMap>
  
   <resultMap id="BaseResultMap2" type="com.neuedu.ruidaoexam.entity.Paper" >
    <id column="paper_id" property="paperId" jdbcType="INTEGER" />
    <result column="paper_name" property="paperName" jdbcType="VARCHAR" />
    <result column="paper_type" property="paperType" jdbcType="INTEGER" />
    <result column="createdByTeacherId" property="createdbyteacherid" jdbcType="INTEGER" />
    <result column="paper_time" property="paperTime" jdbcType="INTEGER" />
    <result column="total_score" property="totalScore" jdbcType="INTEGER" />
    <result column="point_price" property="pointPrice" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    student_id, name, email, password, points, face_data
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.neuedu.ruidaoexam.entity.StudentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from student
    where student_id = #{studentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from student
    where student_id = #{studentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.ruidaoexam.entity.StudentExample" >
    delete from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.ruidaoexam.entity.Student" >
    insert into student (student_id, name, email, 
      password, points, face_data
      )
    values (#{studentId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{points,jdbcType=INTEGER}, #{faceData,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.ruidaoexam.entity.Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="points != null" >
        points,
      </if>
      <if test="faceData != null" >
        face_data,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="points != null" >
        #{points,jdbcType=INTEGER},
      </if>
      <if test="faceData != null" >
        #{faceData,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.ruidaoexam.entity.StudentExample" resultType="java.lang.Integer" >
    select count(*) from student
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update student
    <set >
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.points != null" >
        points = #{record.points,jdbcType=INTEGER},
      </if>
      <if test="record.faceData != null" >
        face_data = #{record.faceData,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update student
    set student_id = #{record.studentId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      points = #{record.points,jdbcType=INTEGER},
      face_data = #{record.faceData,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.ruidaoexam.entity.Student" >
    update student
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="points != null" >
        points = #{points,jdbcType=INTEGER},
      </if>
      <if test="faceData != null" >
        face_data = #{faceData,jdbcType=VARCHAR},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.ruidaoexam.entity.Student" >
    update student
    set name = #{name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      points = #{points,jdbcType=INTEGER},
      face_data = #{faceData,jdbcType=VARCHAR}
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
  
  <select id="getStudentByEmail" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select *
    from student
    where email = #{email,jdbcType=VARCHAR}
  </select>
  
    <!-- 
  19/6/21 by王重阳
  备注：增加了selectByEmail,selectByName,selectByEmailPassword,
 selectByNamePassword
   -->
  <select id="selectByEmail" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from student
    where email = #{email,jdbcType=VARCHAR}
  </select>
  <select id="selectByName" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from student
    where name = #{name,jdbcType=VARCHAR}
  </select>
  <select id="selectByEmailPassword" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from student
    where email = #{email,jdbcType=VARCHAR} and password = #{password,jdbcType=VARCHAR}
  </select>
  <select id="selectByNamePassword" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from student
    where name = #{name,jdbcType=VARCHAR} and password = #{password,jdbcType=VARCHAR}
  </select>
  <select id="showNotAnswered" parameterType="Integer" resultMap="BaseResultMap2">
  select * from paper where paper_id in (select a.paper_id from ((select paper_id from invite_student where student_id=#{stuid}) union all (select paper_id from trade_record where buyer_type=2 and buyer_s_id=#{stuid})) a  where a.paper_id not in(select b.paper_id from answered_paper b where b.stu_id=#{stuid})); 
  </select>
  
</mapper>